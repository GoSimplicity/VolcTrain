// Code generated by MockGen. DO NOT EDIT.
// Source: ../../model/vt_training_jobs_model.go
//
// Generated by this command:
//
//	mockgen -source=../../model/vt_training_jobs_model.go -destination=training_job_model_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "api/model"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVtTrainingJobsModel is a mock of VtTrainingJobsModel interface.
type MockVtTrainingJobsModel struct {
	ctrl     *gomock.Controller
	recorder *MockVtTrainingJobsModelMockRecorder
	isgomock struct{}
}

// MockVtTrainingJobsModelMockRecorder is the mock recorder for MockVtTrainingJobsModel.
type MockVtTrainingJobsModelMockRecorder struct {
	mock *MockVtTrainingJobsModel
}

// NewMockVtTrainingJobsModel creates a new mock instance.
func NewMockVtTrainingJobsModel(ctrl *gomock.Controller) *MockVtTrainingJobsModel {
	mock := &MockVtTrainingJobsModel{ctrl: ctrl}
	mock.recorder = &MockVtTrainingJobsModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVtTrainingJobsModel) EXPECT() *MockVtTrainingJobsModelMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVtTrainingJobsModel) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVtTrainingJobsModelMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVtTrainingJobsModel)(nil).Delete), id)
}

// FindOne mocks base method.
func (m *MockVtTrainingJobsModel) FindOne(id int64) (*model.VtTrainingJobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id)
	ret0, _ := ret[0].(*model.VtTrainingJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockVtTrainingJobsModelMockRecorder) FindOne(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockVtTrainingJobsModel)(nil).FindOne), id)
}

// FindOneByName mocks base method.
func (m *MockVtTrainingJobsModel) FindOneByName(name string) (*model.VtTrainingJobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByName", name)
	ret0, _ := ret[0].(*model.VtTrainingJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByName indicates an expected call of FindOneByName.
func (mr *MockVtTrainingJobsModelMockRecorder) FindOneByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByName", reflect.TypeOf((*MockVtTrainingJobsModel)(nil).FindOneByName), name)
}

// GetByStatus mocks base method.
func (m *MockVtTrainingJobsModel) GetByStatus(status string) ([]*model.VtTrainingJobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", status)
	ret0, _ := ret[0].([]*model.VtTrainingJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockVtTrainingJobsModelMockRecorder) GetByStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockVtTrainingJobsModel)(nil).GetByStatus), status)
}

// Insert mocks base method.
func (m *MockVtTrainingJobsModel) Insert(data *model.VtTrainingJobs) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", data)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockVtTrainingJobsModelMockRecorder) Insert(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVtTrainingJobsModel)(nil).Insert), data)
}

// List mocks base method.
func (m *MockVtTrainingJobsModel) List(page, pageSize int, filters map[string]any) ([]*model.VtTrainingJobs, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", page, pageSize, filters)
	ret0, _ := ret[0].([]*model.VtTrainingJobs)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockVtTrainingJobsModelMockRecorder) List(page, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVtTrainingJobsModel)(nil).List), page, pageSize, filters)
}

// Update mocks base method.
func (m *MockVtTrainingJobsModel) Update(data *model.VtTrainingJobs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVtTrainingJobsModelMockRecorder) Update(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVtTrainingJobsModel)(nil).Update), data)
}

// UpdateStatus mocks base method.
func (m *MockVtTrainingJobsModel) UpdateStatus(id int64, status, phase string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status, phase)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockVtTrainingJobsModelMockRecorder) UpdateStatus(id, status, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockVtTrainingJobsModel)(nil).UpdateStatus), id, status, phase)
}
