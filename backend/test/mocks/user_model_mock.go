// Code generated by MockGen. DO NOT EDIT.
// Source: ../../model/vt_users_model.go
//
// Generated by this command:
//
//	mockgen -source=../../model/vt_users_model.go -destination=user_model_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "api/model"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVtUsersModel is a mock of VtUsersModel interface.
type MockVtUsersModel struct {
	ctrl     *gomock.Controller
	recorder *MockVtUsersModelMockRecorder
	isgomock struct{}
}

// MockVtUsersModelMockRecorder is the mock recorder for MockVtUsersModel.
type MockVtUsersModelMockRecorder struct {
	mock *MockVtUsersModel
}

// NewMockVtUsersModel creates a new mock instance.
func NewMockVtUsersModel(ctrl *gomock.Controller) *MockVtUsersModel {
	mock := &MockVtUsersModel{ctrl: ctrl}
	mock.recorder = &MockVtUsersModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVtUsersModel) EXPECT() *MockVtUsersModelMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVtUsersModel) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVtUsersModelMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVtUsersModel)(nil).Delete), id)
}

// FindOne mocks base method.
func (m *MockVtUsersModel) FindOne(id int64) (*model.VtUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id)
	ret0, _ := ret[0].(*model.VtUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockVtUsersModelMockRecorder) FindOne(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockVtUsersModel)(nil).FindOne), id)
}

// FindOneByEmail mocks base method.
func (m *MockVtUsersModel) FindOneByEmail(email string) (*model.VtUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByEmail", email)
	ret0, _ := ret[0].(*model.VtUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByEmail indicates an expected call of FindOneByEmail.
func (mr *MockVtUsersModelMockRecorder) FindOneByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByEmail", reflect.TypeOf((*MockVtUsersModel)(nil).FindOneByEmail), email)
}

// FindOneByUsername mocks base method.
func (m *MockVtUsersModel) FindOneByUsername(username string) (*model.VtUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUsername", username)
	ret0, _ := ret[0].(*model.VtUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUsername indicates an expected call of FindOneByUsername.
func (mr *MockVtUsersModelMockRecorder) FindOneByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUsername", reflect.TypeOf((*MockVtUsersModel)(nil).FindOneByUsername), username)
}

// Insert mocks base method.
func (m *MockVtUsersModel) Insert(data *model.VtUsers) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", data)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockVtUsersModelMockRecorder) Insert(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVtUsersModel)(nil).Insert), data)
}

// List mocks base method.
func (m *MockVtUsersModel) List(page, pageSize int, filters map[string]any) ([]*model.VtUsers, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", page, pageSize, filters)
	ret0, _ := ret[0].([]*model.VtUsers)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockVtUsersModelMockRecorder) List(page, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVtUsersModel)(nil).List), page, pageSize, filters)
}

// Update mocks base method.
func (m *MockVtUsersModel) Update(data *model.VtUsers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVtUsersModelMockRecorder) Update(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVtUsersModel)(nil).Update), data)
}
