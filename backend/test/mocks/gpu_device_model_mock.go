// Code generated by MockGen. DO NOT EDIT.
// Source: ../../model/vt_gpu_devices_model.go
//
// Generated by this command:
//
//	mockgen -source=../../model/vt_gpu_devices_model.go -destination=gpu_device_model_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "api/model"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVtGpuDevicesModel is a mock of VtGpuDevicesModel interface.
type MockVtGpuDevicesModel struct {
	ctrl     *gomock.Controller
	recorder *MockVtGpuDevicesModelMockRecorder
	isgomock struct{}
}

// MockVtGpuDevicesModelMockRecorder is the mock recorder for MockVtGpuDevicesModel.
type MockVtGpuDevicesModelMockRecorder struct {
	mock *MockVtGpuDevicesModel
}

// NewMockVtGpuDevicesModel creates a new mock instance.
func NewMockVtGpuDevicesModel(ctrl *gomock.Controller) *MockVtGpuDevicesModel {
	mock := &MockVtGpuDevicesModel{ctrl: ctrl}
	mock.recorder = &MockVtGpuDevicesModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVtGpuDevicesModel) EXPECT() *MockVtGpuDevicesModelMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVtGpuDevicesModel) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVtGpuDevicesModelMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVtGpuDevicesModel)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockVtGpuDevicesModel) FindAll(page, pageSize int, clusterId, nodeId int64, status, brand, arg6, healthStatus, search string) ([]*model.VtGpuDevices, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, pageSize, clusterId, nodeId, status, brand, arg6, healthStatus, search)
	ret0, _ := ret[0].([]*model.VtGpuDevices)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockVtGpuDevicesModelMockRecorder) FindAll(page, pageSize, clusterId, nodeId, status, brand, arg6, healthStatus, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockVtGpuDevicesModel)(nil).FindAll), page, pageSize, clusterId, nodeId, status, brand, arg6, healthStatus, search)
}

// FindAvailableDevices mocks base method.
func (m *MockVtGpuDevicesModel) FindAvailableDevices(clusterId int64, gpuCount int) ([]*model.VtGpuDevices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAvailableDevices", clusterId, gpuCount)
	ret0, _ := ret[0].([]*model.VtGpuDevices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAvailableDevices indicates an expected call of FindAvailableDevices.
func (mr *MockVtGpuDevicesModelMockRecorder) FindAvailableDevices(clusterId, gpuCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAvailableDevices", reflect.TypeOf((*MockVtGpuDevicesModel)(nil).FindAvailableDevices), clusterId, gpuCount)
}

// FindByNodeId mocks base method.
func (m *MockVtGpuDevicesModel) FindByNodeId(nodeId int64, page, pageSize int, status string) ([]*model.VtGpuDevices, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNodeId", nodeId, page, pageSize, status)
	ret0, _ := ret[0].([]*model.VtGpuDevices)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByNodeId indicates an expected call of FindByNodeId.
func (mr *MockVtGpuDevicesModelMockRecorder) FindByNodeId(nodeId, page, pageSize, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNodeId", reflect.TypeOf((*MockVtGpuDevicesModel)(nil).FindByNodeId), nodeId, page, pageSize, status)
}

// FindOne mocks base method.
func (m *MockVtGpuDevicesModel) FindOne(id int64) (*model.VtGpuDevices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id)
	ret0, _ := ret[0].(*model.VtGpuDevices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockVtGpuDevicesModelMockRecorder) FindOne(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockVtGpuDevicesModel)(nil).FindOne), id)
}

// Insert mocks base method.
func (m *MockVtGpuDevicesModel) Insert(data *model.VtGpuDevices) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", data)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockVtGpuDevicesModelMockRecorder) Insert(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVtGpuDevicesModel)(nil).Insert), data)
}

// Update mocks base method.
func (m *MockVtGpuDevicesModel) Update(data *model.VtGpuDevices) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVtGpuDevicesModelMockRecorder) Update(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVtGpuDevicesModel)(nil).Update), data)
}

// UpdateStatus mocks base method.
func (m *MockVtGpuDevicesModel) UpdateStatus(id int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockVtGpuDevicesModelMockRecorder) UpdateStatus(id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockVtGpuDevicesModel)(nil).UpdateStatus), id, status)
}
