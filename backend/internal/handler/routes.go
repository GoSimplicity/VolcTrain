// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5

package handler

import (
	"net/http"

	gpu_cluster "api/internal/handler/gpu_cluster"
	gpu_device "api/internal/handler/gpu_device"
	gpu_node "api/internal/handler/gpu_node"
	gpu_usage "api/internal/handler/gpu_usage"
	"api/internal/handler/training"
	"api/internal/svc"
	"api/pkg/middleware"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	// 初始化自定义JWT认证中间件
	jwtAuthMiddleware := middleware.NewJWTAuthMiddleware(serverCtx.JWTService, serverCtx.TokenBlacklist)

	// 注册全局中间件
	server.Use(middleware.ErrorHandlerMiddleware())
	server.Use(middleware.RequestLogMiddleware())
	// 健康检查
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: healthCheckHandler(serverCtx),
			},
		},
	)

	// 认证相关路由（不需要认证中间件）
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: loginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/refresh",
				Handler: refreshTokenHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/auth"),
	)

	// 需要认证的路由
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/logout",
				Handler: logoutHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/codes",
				Handler: getAccessCodesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/auth"),
		rest.WithMiddlewares(jwtAuthMiddleware.Handler()),
	)

	// 用户相关路由（需要认证）
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: getUserInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/user"),
		rest.WithMiddlewares(jwtAuthMiddleware.Handler()),
	)

	// 训练任务路由（需要认证）
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: training.CreateTrainingJobHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: training.ListTrainingJobsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:id",
				Handler: training.GetTrainingJobHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/:id",
				Handler: training.UpdateTrainingJobHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: training.DeleteTrainingJobHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:id/cancel",
				Handler: training.CancelTrainingJobHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:id/restart",
				Handler: training.RestartTrainingJobHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:id/resume",
				Handler: training.ResumeTrainingJobHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:id/suspend",
				Handler: training.SuspendTrainingJobHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:jobId/checkpoints",
				Handler: training.GetJobCheckpointsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:jobId/instances",
				Handler: training.GetJobInstancesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:jobId/logs",
				Handler: training.GetJobLogsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:jobId/metrics",
				Handler: training.GetJobMetricsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:jobId/relations",
				Handler: training.GetJobRelationsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/options",
				Handler: training.GetJobOptionsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/training/jobs"),
		rest.WithMiddlewares(jwtAuthMiddleware.Handler()),
	)

	// 训练队列路由（需要认证）
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: training.CreateTrainingQueueHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: training.ListTrainingQueuesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:id",
				Handler: training.GetTrainingQueueHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/:id",
				Handler: training.UpdateTrainingQueueHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: training.DeleteTrainingQueueHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/options",
				Handler: training.GetQueueOptionsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/training/queues"),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	// GPU集群路由（需要认证）
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: gpu_cluster.CreateGpuClusterHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: gpu_cluster.ListGpuClustersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:clusterId/nodes",
				Handler: gpu_cluster.ListClusterNodesHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:clusterId/nodes/:nodeId",
				Handler: gpu_cluster.RemoveNodeFromClusterHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/:id",
				Handler: gpu_cluster.UpdateGpuClusterHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:id",
				Handler: gpu_cluster.GetGpuClusterHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: gpu_cluster.DeleteGpuClusterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/nodes",
				Handler: gpu_cluster.AddNodeToClusterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/gpuclusters"),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	// GPU设备路由（需要认证）
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: gpu_device.CreateGpuDeviceHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: gpu_device.ListGpuDevicesHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/:id",
				Handler: gpu_device.UpdateGpuDeviceHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:id",
				Handler: gpu_device.GetGpuDeviceHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: gpu_device.DeleteGpuDeviceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/allocations",
				Handler: gpu_device.AllocateGpuDeviceHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/allocations",
				Handler: gpu_device.ListGpuDeviceAllocationsHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/allocations/:id",
				Handler: gpu_device.ReleaseGpuDeviceHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/gpudevices"),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	// GPU节点路由（需要认证）
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: gpu_node.CreateGpuNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: gpu_node.ListGpuNodesHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/:id",
				Handler: gpu_node.UpdateGpuNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:id",
				Handler: gpu_node.GetGpuNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: gpu_node.DeleteGpuNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:nodeId/devices",
				Handler: gpu_node.ListNodeDevicesHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:nodeId/devices/:deviceId",
				Handler: gpu_node.RemoveDeviceFromNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/devices",
				Handler: gpu_node.AddDeviceToNodeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/gpunodes"),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	// GPU使用记录路由（需要认证）
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: gpu_usage.CreateGpuUsageRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: gpu_usage.ListGpuUsageRecordsHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/:id",
				Handler: gpu_usage.UpdateGpuUsageRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:id",
				Handler: gpu_usage.GetGpuUsageRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: gpu_usage.DeleteGpuUsageRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:usageRecordId/relations",
				Handler: gpu_usage.ListGpuUsageRelationsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/relations",
				Handler: gpu_usage.AddGpuUsageRelationHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/gpuusage"),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}